-- Code a cheta to win (WIP)

local RS = game:GetService("RunService")
function ge() return getgenv() end

local isoparts = {
    ["white"] = workspace.WhiteZone,
    ["red"] = workspace["Really redZone"],
    ["black"] = workspace.BlackZone,
    ["blue"] = workspace["Really blueZone"],
    ["green"] = workspace.Camo.Lock.Part,
    ["magenta"] = workspace.MagentaZone,
    ["yellow"] = workspace["New YellerZone"]
}

local function BindRender(name, func, con)
	con = con or RS.RenderStepped
	table.insert(ge().CACTWdata.RenderConnections, {["Name"] = name, ["Connection"] = con:Connect(func)})
end

local function UnbindRender(name)
	for i, connection in pairs(ge().CACTWdata.RenderConnections) do
		if connection.Name == name then
			connection.Connection:Disconnect()
			table.remove(ge().CACTWdata.RenderConnections, i)
		end
	end
end

local function RebindRender(name, func, con)
	UnbindRender(name)
	BindRender(name, func, con)
end

local function IsRender(name)
	local counted = 0
	for i, connection in pairs(ge().CACTWdata.RenderConnections) do
		if connection.Name == name then
			counted = counted + 1
		end
	end
	return counted > 0, counted
end

function isocol(col)
    for _, isop in pairs(isoparts) do
        if isop:FindFirstChild("Lock") and isop.Lock:FindFirstChild("Part") then
            isop.Lock.Part.CanCollide = col
        end
    end
end

CACTW = {
    ["PluginName"] = "CACTW",
    ["PluginDescription"] = "Code a cheat to win, for 'build a boat'",
    ["Commands"] = {
        ["antiisolation"] = {
            ["ListName"] = "antiisolation / antiiso [on/off]",
            ["Description"] = "Isolation mode does not affect you",
            ["Aliases"] = {"antiiso"},
            ["Function"] = function(args, speaker)
                local arg = tostring(args[1]):lower()
                if arg == "on" then
                    RebindRender("ANTI_ISO", function()
                        isocol(false)
                    end, RS.Stepped)
                elseif arg == "off" then
                    UnbindRender("ANTI_ISO")
                    isocol(true)
                else
                    notify("Invalid argument. Do (on/off)")
                end
            end
        }
    }
}

return CACTW